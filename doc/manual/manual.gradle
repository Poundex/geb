plugins {
    alias(libs.plugins.asciidoc)
    id 'java-platform'
    id 'geb.publishing'
}

archivesBaseName = "geb-manual"

repositories {
    maven {
        url "https://jcenter.bintray.com"
    }
}

configurations {
    manual

    groovydocClasspath
    groovydocSources
}

project(":module").subprojects.each { apiModule ->
    dependencies {
        groovydocClasspath project(path: apiModule.path)
        groovydocSources project(path: apiModule.path, configuration: "sources")
    }
}

dependencies {
    groovydocClasspath(project(":module:geb-core")) {
        capabilities {
            requireCapability("org.gebish:geb-core-select")
        }
    }
}

asciidoctorj {
    options = [doctype: 'book']
    attributes = [
        toc                    : 'left',
        encoding               : 'utf-8',
        'test-dir'             : '../../../../manual-snippets/src/test/groovy',
        'test-resources-dir'   : '../../../../manual-snippets/src/test/resources',
        'real-browser-test-dir': '../../../../manual-snippets/real-browser/src/test/groovy',
        'core-source-dir'      : '../../../../../module/geb-core/src/main/groovy',
        'core-test-dir'        : '../../../../../module/geb-core/src/test/groovy',
        numbered               : true,
        sectlinks              : true,
        idprefix               : '',
        idseparator            : '-',
        icons                  : 'font',
        'source-highlighter'   : 'coderay',
        'geb-version'          : project.version,
        'geb-group'            : project.group,
        'geb-group-dir'        : project.group.replace('.', '/'),
        'spock-version'        : '0.7',
        'spock-core-version'   : libs.versions.spock.get(),
        'selenium-version'     : libs.versions.selenium.get(),
        'groovy-version'       : libs.versions.groovy.get(),
        'sauce-connect-version': libs.versions.sauceConnect.get(),
        'home-page'            : 'www.gebish.org',
        docinfo1               : true,
        linkcss                : true,
        stylesheet             : 'css/style.css',
        imagesdir              : 'images'
    ]

    docExtensions project(":doc:asciidoctor-extension")
}

tasks.named("asciidoctor") {
    sources {
        include 'index.adoc'
    }

    resources {
        from file('src/resources')
    }

    baseDirFollowsSourceDir()

    inputs.files(
        { project(":doc:manual-snippets").sourceSets.test.allSource },
        { project(":doc:manual-snippets:real-browser").sourceSets.test.allSource },
        { project(":module:geb-core").sourceSets.main.allSource },
        { project(":module:geb-core").sourceSets.test.allSource }
    ).withPathSensitivity(PathSensitivity.RELATIVE)
}

def groovydocSourcesTask = tasks.register("groovydocSources", Sync) {
    inputs.files configurations.groovydocSources
    from({ configurations.groovydocSources.files.collect { zipTree(it) } })
    exclude 'META-INF/**'
    into "$buildDir/groovydocSources"
}

def apiDocTask = tasks.register("apiDoc", Groovydoc) {
    groovyClasspath = new GroovyRuntime(project).inferGroovyClasspath(configurations.groovydocClasspath)
    classpath = configurations.groovydocClasspath
    destinationDir = file("$buildDir/apiDoc")
    source groovydocSourcesTask
}

def packageManualTask = tasks.register("packageManual", Sync) {
    into "$buildDir/manual"
    from asciidoctor

    into("api") {
        from apiDocTask
    }

    eachFile { file ->
        if (file.path.startsWith("html5")) {
            file.relativePath = new RelativePath(!file.directory, file.relativePath.segments[1..-1] as String[])
        }
    }

    includeEmptyDirs = false
}

def manualZipTask = tasks.register("manualZip", Zip) {
    from packageManualTask
}

artifacts {
    manual manualZipTask
}

publishing {
    publications {
        manual(MavenPublication) {
            artifactId 'geb-manual'
            artifact manualZipTask
            pom {
                name = "Geb Manual - The Book of Geb"
                description = "Geb (pronounced \"jeb\") manual, user guide and API reference."
            }
        }
    }
}

tasks.register("publishJarsAndManual") {
    dependsOn 'publishManualPublicationToSonatypeRepository'
}

tasks.register("openManual") {
    dependsOn "asciidoctor"
    doLast {
        new java.awt.Desktop().browse(fileTree(tasks.asciidoctor.outputDir).find { it.name == 'index.html' }.toURI())
    }
}

idea {
    module {
        excludeDirs += file('build')
    }
}