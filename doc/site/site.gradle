/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath 'io.ratpack:ratpack-gradle:1.8.2'
        classpath 'com.github.node-gradle:gradle-node-plugin:2.2.0'
    }
}

plugins {
    id 'geb.groovy-module'
}

apply plugin: "io.ratpack.ratpack-groovy"
apply plugin: "com.github.node-gradle.node"

ext {
    // The old versions of Geb we are including manuals for
    oldManualVersions = ["1.0", "1.1", "1.1.1", "2.0", "2.1", "2.2", "2.3", "2.3.1", "3.0", "3.0.1", "3.1", "3.2", "3.3", "3.4", "3.4.1", "4.0", "4.1", "5.0"]

    currentVersion = gebModule.isSnapshot() ? oldManualVersions.last() : version
    manualsMetadata = [
        'old'     : (oldManualVersions - currentVersion).reverse().join(','),
        'current' : currentVersion,
        'snapshot': gebModule.isSnapshot() ? project.version : ''
    ]
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://oss.sonatype.org/content/repositories/releases" }
}

configurations {
    currentManual

    oldManualVersions.each {
        delegate."manual-$it"
    }
}

dependencies {
    groovy "org.codehaus.groovy:groovy-all:2.5.4"

    testImplementation "org.spockframework:spock-core:1.3-groovy-2.5"
    testImplementation libs.jsoup
    testImplementation 'org.gebish:geb-spock:4.0'
    testImplementation libs.htmlUnitDriver

    currentManual project(path: ":doc:manual", configuration: "manual")
    oldManualVersions.each {
        delegate."manual-$it" "org.gebish:geb-manual:$it@zip"
    }
}

node {
    version = '8.17.0'

    download = true

    nodeModulesDir = file("src/npm")
}

npm_ci {
    inputs.files(
        'src/npm/package-lock.json',
        'src/npm/semantic.json'
    )
    outputs.dir 'src/npm/node_modules'
    outputs.dir 'src/npm/semantic'
}

processResources {
    from(npm_ci) {
        includeEmptyDirs = false
        include 'jquery/dist/jquery.min.js'
        eachFile {
            it.relativePath = new RelativePath(true, 'public', 'js', it.sourceName)
        }
    }
    from(npm_ci) {
        includeEmptyDirs = false
        include '@browser-logos/android/android_128x128.png'
        include '@browser-logos/chrome/chrome_128x128.png'
        include '@browser-logos/safari/safari_128x128.png'
        include '@browser-logos/safari-ios/safari-ios_128x128.png'
        include '@browser-logos/edge/edge_128x128.png'
        include '@browser-logos/firefox/firefox_128x128.png'
        eachFile {
            it.relativePath = new RelativePath(true, 'public', 'images', it.sourceName)
        }
    }
    from(npm_ci) {
        includeEmptyDirs = false
        include 'dist/semantic.min.js'
        eachFile {
            it.relativePath = new RelativePath(true, 'public', 'js', *it.relativePath.segments[1..-1])
        }
    }
    from(npm_ci) {
        includeEmptyDirs = false
        include 'dist/semantic.min.css'
        include 'dist/themes/default/assets/fonts/**'
        include 'dist/themes/default/assets/images/**'
        eachFile {
            it.relativePath = new RelativePath(true, 'public', 'css', *it.relativePath.segments[1..-1])
        }
    }
}

task gatherManuals(type: Sync) {
    inputs.properties(manualsMetadata)

    def configureManualExtraction = { configuration, label ->
        inputs.files configuration
        into "src/ratpack/public/manual"
        into label, {
            from { zipTree(configuration.singleFile) }
        }
    }

    oldManualVersions.each {
        configureManualExtraction(configurations["manual-$it"], it)
    }
    configureManualExtraction(configurations.currentManual, gebModule.isSnapshot() ? 'snapshot' : version)
    def latestStableManualConfiguration = gebModule.isSnapshot() ? configurations["manual-${oldManualVersions.last()}"] : configurations.currentManual
    configureManualExtraction(latestStableManualConfiguration, "current")
}

task generateConfigProperties() {
    def propertiesFile = file('src/ratpack/ratpack.properties')
    outputs.file(propertiesFile)

    inputs.properties(manualsMetadata)

    doLast {
        def properties = new Properties()
        manualsMetadata.each { key, value ->
            properties.setProperty("manuals.${key}", value)
        }
        propertiesFile.withWriter { Writer writer ->
            properties.store(writer, null)
        }
    }
}

processResources.inputs.files gatherManuals, generateConfigProperties

task publish(type: Exec) {
    commandLine 'git push git@heroku.com:gebish.git master'.tokenize(' ')

    mustRunAfter rootProject.allprojects*.tasks*.withType(Upload)
}

task prepareDeployment(type: Sync) {
    into rootProject.file("deploy")
    with distributions.main.contents
}

if (project.gradle.startParameter.continuous) {
    run {
        flattenClassloaders = true
    }
}

idea {
    module {
        excludeDirs += file('src/npm/node_modules')
    }
}
