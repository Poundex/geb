import geb.gradle.EnvironmentVariablesCommandLineArgumentProvider

import java.time.Duration

import static java.lang.Runtime.runtime

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
        classpath "gradle.plugin.com.github.erdi:idea-gradle-plugins:2.1"
        classpath "gradle.plugin.com.energizedwork.asl2:asl2-gradle-plugin:1.1"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.5"
    }
}

apply plugin: 'base'
apply plugin: 'io.github.gradle-nexus.publish-plugin'
apply plugin: 'com.energizedwork.asl2'
apply plugin: 'com.github.erdi.extended-idea'
apply from: "gradle/idea.gradle"

def getProperty(String name, defaultValue) {
    hasProperty(name) ? property(name) : defaultValue
}


allprojects { project ->
    version = '5.1-SNAPSHOT'
    group = 'org.gebish'

    ext {
        isSnapshot = version.endsWith("-SNAPSHOT")
        isCi = project.hasProperty("ci")
        availableProcessors = isCi ? 2 : Math.min(runtime.availableProcessors().intdiv(2), 4)

        repositories {
            mavenCentral()
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = "c1802e5c2fe49"
            username.set(providers.gradleProperty("sonatypeOssUsername").forUseAtConfigurationTime())
            password.set(providers.gradleProperty("sonatypeOssPassword").forUseAtConfigurationTime())
        }
    }

    clientTimeout = Duration.ofSeconds(300)
    connectTimeout = Duration.ofSeconds(60)

    transitionCheckOptions {
        maxRetries.set(60)
        delayBetween.set(Duration.ofMillis(3000))
    }
}

task stage(type: Sync) {
    dependsOn 'doc:site:prepareDeployment'
}
