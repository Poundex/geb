import geb.gradle.browserstack.BrowserStackAccount
import geb.gradle.saucelabs.SauceAccount
import geb.gradle.lambdatest.LambdaTestAccount

plugins {
    id 'geb.api-module'
    id 'geb.dockerised-test'
    alias(libs.plugins.webdriverBinaries)
    id 'geb-browserstack'
    id 'geb-saucelabs'
    id 'geb-lambdatest'
    id 'geb.all-sources-configuration'
}

java {
    registerFeature('select') {
        usingSourceSet(sourceSets.main)
    }
}

dependencies {
    api libs.selenium.api

    api project(":module:geb-ast")
    api project(":module:geb-waiting")
    api libs.threeTen.extra

    implementation(libs.jodd.core)
    implementation(libs.jodd.lagarto)

    selectImplementation(libs.selenium.support)

    testImplementation libs.cglib
    testImplementation libs.jsoup
    testImplementation libs.ratpack.groovyTest
    testImplementation project(":internal:test-support-spock")

    sauceConnect libs.sauceConnect
}

webdriverBinaries {
    chromedriver {
        version = "86.0.4240.22"
        fallbackTo32Bit = true
    }
}

tasks.named("test") {
    maxParallelForks gebModule.maxWorkers
}

tasks.register("allCrossBrowserTests") {
    dependsOn 'allSauceLabsTests', 'allBrowserStackTests', 'allDockerisedCrossBrowserTests', 'allLambdaTestTests'
}

def firefoxLinuxTestTask = tasks.register("firefoxLinuxTest", Test) {
    maxHeapSize = "512m"
    systemProperty "geb.dockerized.driver", "firefox"
    maxParallelForks 2
}

tasks.named("chromeLinuxTest") {
    maxParallelForks 2
}

tasks.named("allDockerisedCrossBrowserTests") {
    dependsOn firefoxLinuxTestTask
}

tasks.register("localChromeTest", Test) {
    maxHeapSize = "512m"
    systemProperty "geb.local.driver", "chrome"
}

sauceLabs {
    browsers {
        safari_mac_8 {
            capabilities platform: "OS X 10.10"
        }
    }
    task {
        maxHeapSize = "512m"
        maxParallelForks 5
        testLogging {
            events "started", "skipped", "passed", "failed"
        }
    }
    account {
        username = System.getenv(SauceAccount.USER_ENV_VAR)
        accessKey = System.getenv(SauceAccount.ACCESS_KEY_ENV_VAR)
    }
    connect {
        timeout = 10 // minutes
        identifier = UUID.randomUUID().toString()
    }
}

browserStack {
    def applicationAddresses = [8000, 8080, 9000, 9090, 9999].collect { "http://localhost:$it" }
    application(*applicationAddresses)

    browsers {
        android {
            capabilities device: "Samsung Galaxy S6", realMobile: "true"
        }
        chrome_mac_78 {
            capabilities os: "OS X", os_version: "High Sierra"
        }
        chrome_windows_78 {
            capabilities os: "Windows", os_version: "10"
        }
        firefox_mac_47 {
            capabilities os: "OS X", os_version: "High Sierra"
        }
        create("internet explorer_windows_10") {
            capabilities os: "Windows", os_version: "8"
        }
        create("internet explorer_windows_11") {
            capabilities os: "Windows", os_version: "10"
        }
        create("edge_windows_18") {
            capabilities os: "Windows", os_version: "10"
        }
    }
    task {
        maxHeapSize = "512m"
        maxParallelForks 5
        testLogging {
            events "started", "skipped", "passed", "failed"
        }
    }
    account {
        username = System.getenv(BrowserStackAccount.USER_ENV_VAR)
        accessKey = System.getenv(BrowserStackAccount.ACCESS_KEY_ENV_VAR)
    }
    local {
        identifier = UUID.randomUUID().toString()
    }
}

lambdaTest {
    browsers {
        firefox_windows_70 {
            capabilities platform: "Windows 10"
        }
    }
    task {
        maxHeapSize = "512m"
        maxParallelForks 5
        testLogging {
            events "started", "skipped", "passed", "failed"
        }
    }
    account {
        username = System.getenv(LambdaTestAccount.USER_ENV_VAR)
        accessKey = System.getenv(LambdaTestAccount.ACCESS_KEY_ENV_VAR)
    }
    tunnelOps {
        tunnelName = UUID.randomUUID().toString()
    }
}


tasks.register("nonIeBrowserStackTests") {
    dependsOn 'androidTest', 'chromeMac78Test', 'chromeWindows78Test', 'firefoxMac47Test'
}

tasks.register("ieBrowserStackTests") {
    dependsOn 'internetExplorerWindows11Test', 'edgeWindows18Test'
}

publishing.publications.main {
    suppressPomMetadataWarningsFor('selectApiElements')
    suppressPomMetadataWarningsFor('selectRuntimeElements')
    pom {
        name = "Geb Core"
        description = "Geb (pronounced \"jeb\") is a browser automation solution. It brings together the power of WebDriver, the elegance of jQuery content selection, the robustness of Page Object modelling and the expressiveness of the Groovy language."
    }
}
